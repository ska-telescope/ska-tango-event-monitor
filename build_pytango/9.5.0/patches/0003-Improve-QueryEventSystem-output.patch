From c8ada637af8b372b0d83dcf6b0106411c2bd6725 Mon Sep 17 00:00:00 2001
From: Thomas Ives <tri@observatorysciences.co.uk>
Date: Mon, 17 Feb 2025 13:13:57 +0000
Subject: [PATCH 3/3] Improve QueryEventSystem output

---
 src/client/zmqeventconsumer.cpp          | 20 +++++++-
 src/include/tango/client/eventconsumer.h | 60 +++++++++++++++++++-----
 src/server/zmqeventsupplier.cpp          |  1 +
 3 files changed, 67 insertions(+), 14 deletions(-)

diff --git a/src/client/zmqeventconsumer.cpp b/src/client/zmqeventconsumer.cpp
index 255e72ce..b1fba735 100644
--- a/src/client/zmqeventconsumer.cpp
+++ b/src/client/zmqeventconsumer.cpp
@@ -1152,10 +1152,12 @@ void ZmqEventConsumer::query_event_system(std::ostream &os)
             os << "\"" << pair.first << "\":{";
             os << "\"channel_name\":\"" << pair.second.channel_name << "\"";
             os << ",\"callback_count\":" << pair.second.callback_list.size();
-            os << ",\"counter\":" << pair.second.ctr;
+            os << ",\"server_counter\":" << pair.second.ctr;
+            os << ",\"event_count\":" << pair.second.event_count;
+            os << ",\"missed_event_count\":" << pair.second.missed_event_count;
             char buffer[128];
             std::strftime(buffer, 128, "%Y-%m-%dT%H:%M:%S", std::gmtime(&pair.second.last_subscribed));
-            os << ",\"last_subscribed\":\"" << (const char *) buffer << "\"";
+            os << ",\"last_resubscribed\":\"" << (const char *) buffer << "\"";
             os << "}";
             first = false;
         }
@@ -1182,6 +1184,7 @@ void ZmqEventConsumer::query_event_system(std::ostream &os)
         {
             std::lock_guard<std::mutex> lg{perf_lock};
             buffer = perf_ring_buffer;
+            perf_ring_buffer.reset();
         }
         buffer.json_dump(os);
     }
@@ -2140,6 +2143,12 @@ void ZmqEventConsumer::push_zmq_event(std::string &ev_name,
             }
 
             evt_cb.ctr = ds_ctr;
+            evt_cb.event_count++;
+
+            if(err_missed_event)
+            {
+                evt_cb.missed_event_count++;
+            }
 
             //
             // Get which type of event data has been received (from the event type)
@@ -2185,6 +2194,13 @@ void ZmqEventConsumer::push_zmq_event(std::string &ev_name,
                 data_type = ATT_VALUE;
             }
 
+            if(sample != nullptr)
+            {
+                sample->event_type = data_type;
+                strncpy(sample->att_name, att_name.c_str(), 31);
+                sample->att_name[31] = '\0';
+            }
+
             //
             // Unmarshal the event data
             //
diff --git a/src/include/tango/client/eventconsumer.h b/src/include/tango/client/eventconsumer.h
index c02f65be..8bba040c 100644
--- a/src/include/tango/client/eventconsumer.h
+++ b/src/include/tango/client/eventconsumer.h
@@ -396,7 +396,7 @@ typedef struct event_callback_base
     std::string event_name;
     std::string channel_name;
     std::string fully_qualified_event_name;
-    time_t last_subscribed;
+    time_t last_subscribed = 0;
     TangoMonitor *callback_monitor;
     std::vector<EventSubscribeStruct> callback_list;
     bool alias_used;
@@ -420,6 +420,10 @@ typedef struct event_callback : public EventCallBackBase, public EventCallBackZm
     std::string client_attribute_name;
     ReceivedFromAdmin received_from_admin;
 
+    // For monitoring
+    int event_count = 0;
+    int missed_event_count = 0;
+
     std::string get_client_attribute_name()
     {
         return client_attribute_name;
@@ -700,21 +704,62 @@ class ZmqEventConsumer : public EventConsumer, public omni_thread
         }
     }
 
+    enum UserDataEventType
+    {
+        ATT_CONF = 0,
+        ATT_READY,
+        ATT_VALUE,
+        DEV_INTR,
+        PIPE
+    };
+
+    static const char *user_data_event_type_to_string(int i)
+    {
+        switch(i)
+        {
+        case ATT_CONF:
+            return "ATT_CONF";
+        case ATT_READY:
+            return "ATT_READY";
+        case ATT_VALUE:
+            return "ATT_VALUE";
+        case DEV_INTR:
+            return "DEV_INTR";
+        case PIPE:
+            return "PIPE";
+        default:
+            return "UNKNOWN";
+        }
+    }
+
     struct PerfMonSample
     {
         long micros_since_last_event = -1;
         long sleep_micros = 0;
         long process_micros = 0;
-        long first_callback_lactency_micros = LONG_MIN;
         int callback_count = 0;
         int wake_count = 0;
+        char att_name[32];
+        int event_type = -1;
+        // Only set if event_type == ATT_VALUE
+        long first_callback_lactency_micros = LONG_MIN;
 
         void json_dump(std::ostream &os)
         {
             os << "{\"micros_since_last_event\":" << micros_since_last_event;
             os << ",\"sleep_micros\":" << sleep_micros;
+            os << ",\"event_type\":" << "\"" << user_data_event_type_to_string(event_type) << "\"";
+            os << ",\"att_name\":" << "\"" << att_name << "\"";
             os << ",\"process_micros\":" << process_micros;
-            os << ",\"first_callback_lactency_micros\":" << first_callback_lactency_micros;
+            os << ",\"first_callback_lactency_micros\":";
+            if(event_type == ATT_VALUE)
+            {
+                os << first_callback_lactency_micros;
+            }
+            else
+            {
+                os << "null";
+            }
             os << ",\"callback_count\":" << callback_count;
             os << ",\"wake_count\":" << wake_count;
             os << "}";
@@ -739,15 +784,6 @@ class ZmqEventConsumer : public EventConsumer, public omni_thread
 
     void get_subscribed_event_ids(DeviceProxy *, std::vector<int> &);
 
-    enum UserDataEventType
-    {
-        ATT_CONF = 0,
-        ATT_READY,
-        ATT_VALUE,
-        DEV_INTR,
-        PIPE
-    };
-
     enum SocketCmd
     {
         SUBSCRIBE = 0,
diff --git a/src/server/zmqeventsupplier.cpp b/src/server/zmqeventsupplier.cpp
index 18bea88a..a7b33194 100644
--- a/src/server/zmqeventsupplier.cpp
+++ b/src/server/zmqeventsupplier.cpp
@@ -850,6 +850,7 @@ void ZmqEventSupplier::query_event_system(std::ostream &os)
     if(perf_mon_enabled)
     {
         perf_ring_buffer.json_dump(os);
+        perf_ring_buffer.reset();
     }
     else
     {
-- 
2.48.1

